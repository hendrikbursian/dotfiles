#!/usr/bin/env bash

function git-fetch-worktree() {
	git config remote.origin.fetch '+refs/heads/*:refs/remotes/origin/*'
	git fetch
}

function git-add-worktree() {
	git worktree add "$1"
	cd "$1" || exit
}

function git-rebase-interactive-branch-root() {
	git rebase --interactive "$(git log $(git remote show origin | sed -n '/HEAD branch/s/.*: //p')..$(git branch --show-current) --oneline | tail -1 | awk '{ print $1 }')"~1
}

function quokka_dev() {
	services=("api-service" "watch-dog" "hafas-injektor-service" "mapping-list-service"  "nss-service" "stop-mapper-service")
	selected_services=($(echo "${services[@]}" | tr ' ' '\n' | fzf --multi))

    # docker_services=("mail" "ftps")
	# selected_docker_services=($(echo "${docker_services[@]}" | tr ' ' '\n' | fzf --multi))

	tmux new-window -n "node"
	for service in "${selected_services[@]}"; do
        case "$service" in
            "api-service")
                PORT=3000
                DEBUG_PORT=9220
            ;;
            "watch-dog")
                PORT=3001
                DEBUG_PORT=9221
            ;;
            "mapping-list-service")
                PORT=3002
                DEBUG_PORT=9222
            ;;
            "stop-mapper-service")
                PORT=3003
                DEBUG_PORT=9223
            ;;
            "nss-service")
                PORT=3004
                DEBUG_PORT=9224
            ;;
            "hafas-injektor-service")
                PORT=3005
                DEBUG_PORT=9225
            ;;
            *) echo "no port set for $service"
            ;;
        esac    
		tmux send-keys "PORT=$PORT yarn backend/ nest start --watch --debug $DEBUG_PORT $service" C-m
		tmux split-window -v
	done

    tmux send-keys "yarn frontend/ serve"
    tmux split-window -v
    tmux send-keys "yarn packages/@quokka/saml-mock/ start"

    # if [[ -z ${selected_docker_services[0]} ]]; then
    #     tmux new-window -n "docker"
    #     tmux send-keys "docker compose --file backend/docker-compose.dev.yml up $selected_docker_services" C-m
    # fi
}
